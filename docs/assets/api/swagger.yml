swagger: '2.0'
info:
  title: OpenREDY WOS Api
  x-logo:
    url: '../images/openredy_logo.svg'
  description: |
  version: 1.0
x-tagGroups:
  - name: API Operations
    tags:
      - WOS
      - JRNL
      - GRPH
      - AUTH
host: openredy-demo.westeurope.cloudapp.azure.com
schemes:
  - http
produces:
  - appliction/json
consumes:
  - application/x-www-form-urlencoded
paths:
  /web/api/v1/wos/get:
    get:
      tags:
        - WOS
      operationId: wosGet
      summary: Get a Nod structure
      description: Retrieve a hierachy of the nods tree
      parameters:
        - in: query
          name: path 
          description: | 
            path of the object to fetch  

            _short name: **p**_
          type: string
          required: false
          allowEmptyValue: false
        - in: query
          name: id
          type: integer
          format: long
          description: | 
            id of the object to fetch

            _short name: **i**_
          required: false
          allowEmptyValue: false
        - in: query
          name: depth
          type: integer
          description: | 
            depth of the fetched structure, 0 means to fetch all depth
            * 0 = object and all descendents
            * 1 = object fields
            * 2 = object fields and properties
            * 3 = object field and properties with childs
            ...
            _short name: **d**_
          required: false
          allowEmptyValue: false
          default: 1
        - $ref: '#/parameters/optionsParam' 
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          schema:
            $ref: "#/definitions/BaseNodObject"
          description: Ok
        '410':
           $ref: '#/responses/NotAuthorized'
        '404':
          $ref: '#/responses/NotFound'
        '405':
          $ref: '#/responses/MethodNotAllowed'
        '408': 
          $ref: '#/responses/Timeout'
      security:
        - basicAuth: []
        - oauthPasswordAuth: []
      x-code-samples: 
        - lang: JavaScript
          source: |
            $.ajax("http://localhost/web/api/v1/wos/get", {
              headers: {
                authorization: "BASIC " + bota('user:password') 
              },
              contentType: '',
              data: {
                p: ':web.api.v1.wos',
                d: 1,
                o: 'all'
              }
            }, function(data) {
              console.log(data);
            });
        - lang: JavaScript (Node)
          source: |
            var http = require("http");
            var requestData = 'p=%3Aweb.api.v1.wos&d=1'
            var req = http.request({
              protocol: "http",
              host: "127.0.0.1",
              method: "GET",
              path: "/web/api/v1/wos/get",
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': Buffer.byteLength(requestData)
            },
            auth: 'user:password'
            },
            function (res) {
              res.on('end', () => {
                console.info('request end')
              });

              res.on('data', (chunk) => {
                console.log(`BODY: ${chunk}`);
              });
            });

            req.on('error', error => {
              console.dir(error);
            });

            req.write(requestData);
            req.end();
        - lang: Python
          source: |
              import requests
              r = requests.get('http://localhost/web/api/v1/wos/get',auth=('user','password'),params={'d':'2','p':':web.api.v1.wos'})
              print r.text
        - lang: Curl
          source: |
              curl -X GET "http://localhost/web/api/v1/wos/get?p=%3Aweb.api.v1.wos&i=0&d=1&o=all" -H "accept: application/json"
  /web/api/v1/wos/search:
    get:
      operationId: wosSearch
      tags:
        - WOS
      summary: Search Nods
      description: filters a list of nods, looking recursivly into the wos structure
      parameters:
        - in: query
          name: path
          description: | 
            path of the base object from where to filter.

            _short name: **p**_
          type: string
          required: false
          default: '' 
        - in: query
          name: id
          type: integer
          description: | 
            id of the base object from where to filter

            _short name: **i**_
          required: false
          default: 0
        - in: query
          name: depth
          type: integer
          description: |
           d[epth] -> depth of the fetched structure, 0 means to fetch all depth
            * 0 = object and all descendents
            * 1 = object fields
            * 2 = object fields and properties
            * 3 = object field and properties with childs
            ...

            _short name: **d**_
          required: false
          allowEmptyValue: false
          default: 0
        - in: query
          name: matchClasses
          type: array
          collectionFormat: csv
          items:
            type: integer
          description: | 
            A list of object classes id.  
            Filtered objects have to match exaclty these IDs.

            _short name: **mc**_
          required: false
          default: ''
        - in: query
          name: isClasses
          type: array
          collectionFormat: csv
          items:
            type: integer
          description: | 
            A list of object classes id.  
            Filtered objects must be or inherit from these classes.

             _short name: **ic**_
          required: False
        - in: query
          name: label
          type: string
          description: |
            Filters objects with a label containing this value (not case-sensitive)

            _short name: **l**_
          required: false
        - in: query
          name: name
          type: string
          description: |
            Filters object with a name containing this value (not case-sensitive)

             _short name: **n**_
          required: false
        - in: query
          name: includeRoot
          type: boolean
          description: |
            Determines wether to include or nod the base object in the lookup and results.

            _short name: **ir**_
          default: false
        - in: query
          name: set
          type: integer
          description: |
            Filters objects belonging to the specified set

            _short name: **st**_
          required: false
        - $ref: '#/parameters/flagsParam'
        - $ref: '#/parameters/optionsParam'
        - $ref: '#/parameters/takeParam'
        - $ref: '#/parameters/skipParam'
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: "#/definitions/BaseNodObject"
          description: OK
        '404':
         $ref: '#/responses/NotFound'
        '405':
          $ref: '#/responses/MethodNotAllowed'
        '408': 
          $ref: '#/responses/Timeout'
        '410':
          $ref: '#/responses/NotAuthorized'
      security:
        - basicAuth: []
        - oauthPasswordAuth: []
  /web/api/v1/wos/put:
    put:
      operationId: wosPut
      tags:
        - WOS
      summary: Update a Nod
      description: Updates fields of an object
      parameters:
        - in: formData
          name: path
          description: |
            path of the modified object 
            
            _short name: **p**_
          type: string
          required: false
          default: '' 
        - in: formData
          name: i
          type: integer
          description: | 
            id of the modified nod object

            _short name: **i**_
          required: false
          default: 0
        - in: formData
          name: label
          type: string
          description: |
            a new label for the nod object
            * **constraint** -> label update is allowed only for users with a user kind / level at least equal to the nod permissions required for writing
            * **constraint** -> label update is allowed only for users in the groups allowed to write in the parent object ressource, if any.
            * **constraint** -> label update is allowed only for nod objects with the flag "Major" / L
            * **constraint** -> label string should
              * Not start with a numeric
              * Not contains ':' or '.'
              * Not contains empty spaces 
              * Should contains alphanumeric caractres
              => match regular expression : [a-zA-Z_~]+[a-zA-Z1-9_~]* 
            * **constraint** -> label string should

            _short name: **l**_
          pattern: ^[a-zA-Z_~]+[a-zA-Z1-9_~]$ 
          required: false
        - in: formData
          name: n
          type: string
          description: |
            n[ame] -> a new name / libelle for the nod object
            * **constraint** -> name update is allowed only for users with a user kind / level at least equal to the nod permissions required for writing
            * **constraint** -> name update is allowed only for nod objects with the flag "Name" / N
            * **advice** -> after a name update, the property / child with a label as  `np` (_**n[ame]p[roperty**_) should update it's content.

            _short name: **n**_
          required: false
        - in: formData
          name: value
          type: string
          description: |
            v[alue] -> a new value for the nod object
            * **constraint** -> value update is allowed if the nod object has flag 'W' / Write(eable)
            * **constraint** -> value update is allowed only for users with a user kind / level at least equal to the nod permissions required for writing

            _short name: **v**_
          required: false 
        - $ref: '#/parameters/enabledFlagsParam'
        - $ref: '#/parameters/disabledFlagsParam'
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          schema:
            $ref: "#/definitions/BaseNodObject"
          description: OK
        '202':
          schema:
            $ref: "#/definitions/BaseNodObject"
          description: Partial result, some values hasn't been updated
          examples:
            application/json:
              i: 411
              v: False
        '403':
          schema:
            $ref: "#/definitions/ApiError"
          description: |
            Invalid value format 
            * for instance the blob value is not readable as a Base64 string
          examples:
            application/json:
              code: 15
              message: Bad value format
        '404':
           $ref: '#/responses/NotFound'
        '405':
          $ref: '#/responses/MethodNotAllowed'
        '410':
           $ref: '#/responses/NotAuthorized'
        '412':
          schema:
            $ref: "#/definitions/ApiError"
          description: |
            Constraint violation
            * Reasons
              * Not allowed to update the value when the nod object is "ReadOnly"
              * Not allowed to update the label when the nod object is not "Major"
              * Not allowed to update the label when the nod object is Owned
          examples:
            application/json:
              code: 17
              message: Can't update the value of a readonly nod object
      security:
        - basicAuth: []
        - oauthPasswordAuth: []  
  /web/api/v1/wos/classes:
    get:
      operationId: wosClasses
      tags:
        - WOS
      summary: Get Nod Classes
      description: Retrieve supported nod object's classes
      parameters:
        - in: query
          name: c
          description: | 
            c[lassIds] -> list of class IDs to fetch
          type: array
          collectionFormat: csv
          items:
            type: integer
          required: false
          default: ''
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: "#/definitions/NodClass"
          description: OK
        '410':
           $ref: '#/responses/NotAuthorized'
        '405':
          $ref: '#/responses/MethodNotAllowed'
      security:
        - basicAuth: []
        - oauthPasswordAuth: []  
  /web/api/v1/jrnl/get:
    get:
      operationId: jrnlGet
      summary: Get an event
      tags:
        - JRNL
      parameters:
        - in: query
          type: number
          name: i
          description: i[d] -> the event id
          required: true
          allowEmptyValue: false
        - $ref: '#/parameters/eventOptionsParam'
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          schema:
            $ref: "#/definitions/JrnlEvent"
          description: OK
        '410':
           $ref: '#/responses/NotAuthorized'
        '404':
          schema:
            $ref: "#/definitions/ApiError"
          description: | 
            * error code -> 10  
            * reason -> targetted object not found (path or id not found)
        '405':
          $ref: '#/responses/MethodNotAllowed'
        '408': 
          $ref: '#/responses/Timeout'
      security:
        - basicAuth: []
        - oauthPasswordAuth: []
  /web/api/v1/jrnl/search:
    get:
      summary: Fetch/Filter events
      operationId: jrnlSearch
      tags:
        - JRNL
      description: filters the event list by some immutable fields (states stored with event) 
      parameters:
        - in: query
          name: op
          description: o[rigin]p[ath] -> path of the event ressource 
          type: string
          required: false
          default: '' 
        - in: query
          name: oi
          type: integer
          description: o[rigin]i[d] -> id of the event resource
          required: false
          default: 0
        - in: query
          name: dmin
          type: string
          format: date
          description: d[ate]min -> 8601 ISO Date String 
          required: false
          default: 0
        - in: query
          name: dmax
          type: string
          format: date
          description: d[ate]max -> 8601 ISO Date String 
          required: false
          default: 0
        - in: query
          name: sf
          type: string
          format: date
          description: s[orted]f[ield] -> sort by field 
          required: false
          default: 0
        - in: query
          name: sa
          type: boolean
          description: s[ort]a[scendant] -> enable ascending sort
          required: false
          default: false
        - in: query
          name: gr
          type: array
          collectionFormat: csv
          items:
            type: integer
          description: gr[oups] -> a list of nod group id's
          default: ''
        - in: query
          name: eq
          type: number
          description: eq[uipment] -> id of a nod equipement
        - in: query
          name: zo
          type: number
          description: zo[ne] -> id of a nod zone
        - in: query
          name: st
          type: number
          description: s[e]t -> id of a nod set
        - in: query
          name: po
          type: boolean
          description: p[ending]o[nly] -> enabled pending-only mode
          default: false
        - in: query
          name: pr
          type: boolean
          description: p[ending]r[estored] -> when p[ending]o[nly]  is enabled and a[c]k= 1 or 0 then will return also not pending events, but not aquitted ones
        - in: query
          name: ak
          type: integer
          description: |
            a[c]k -> filter acquitted events, 0 means all, 1 means not ones, 2 for acquittedevents
          default: 0 
        - $ref: '#/parameters/eventTypeParam'
        - $ref: '#/parameters/eventOptionsParam'
        - $ref: '#/parameters/takeParam'
        - $ref: '#/parameters/skipParam'
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          schema:
            type: object
            properties:
              count:
                type: number
                description: number of total elements matching filters
              items:
                type: array
                items:
                  $ref: "#/definitions/JrnlEvent"
          description: OK
        '410':
           $ref: '#/responses/NotAuthorized'
        '404':
          schema:
            $ref: "#/definitions/ApiError"
          description: | 
            * error code -> 10  
            * reason -> root / base nod object not found ( path or id not found)
        '405':
          $ref: '#/responses/MethodNotAllowed'
        '408': 
          $ref: '#/responses/Timeout'
      security:
        - basicAuth: []
        - oauthPasswordAuth: []
  /web/api/v1/jrnl/put:
    put:
      operationId: jrnlPut
      summary: Updates an event
      tags:
        - JRNL
      parameters:
        - in: query
          type: integer
          name: i
          description: i[d] -> the event id
          required: true
          allowEmptyValue: false
        - in: query
          type: boolean
          name: ak
          description: a[c]k -> whether the event is commited by the connected user
          required: true
        - in: query
          type: string
          name: s
          description: s[tate] -> ressource state text for the event
        - $ref: '#/parameters/eventOptionsParam'
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: "#/definitions/JrnlEvent"
          description: OK
        202:
          schema:
            $ref: "#/definitions/JrnlEvent"
          description: The event is not modified (for instance it was already ack)
        410:
           $ref: '#/responses/NotAuthorized'
        404:
          schema:
            $ref: "#/definitions/ApiError"
          description: | 
            * error code -> 10  
            * reason -> targetted object not found (path or id not found)
          examples:
            application/json:
              code: 10
              error: targetted object not found (origin id not found)
        405:
          $ref: '#/responses/MethodNotAllowed'
        500:
          schema:
            $ref: "#/definitions/ApiError"
          description: | 
            Internal technical error, event may not beeing updated.
          examples:
            application/json:
              code: 20
              message: Technical error, event maynot 
      security:
        - basicAuth: []
        - oauthPasswordAuth: []
    /easy/RIA/Grph/GetItemSchemas:
    get:
      operationId: grphGetItemSchemas
      summary: Get historical metadatas
      description: retrieve all trace and flux datas
      tags:
        - GRPH
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BaseItemSchemaObject'
        '410':
          description: Authentification problem
      security:
        - basicAuth: []
        - oauthPasswordAuth: []
  /easy/RIA/Grph/GetData:
    get:
      operationId: grphGetData
      summary: Get historical datas
      description: retrieve points from trace / flux datas
      tags:
        - GRPH
      parameters:
        - in: query
          name: DataIDs
          type: array
          collectionFormat: csv
          minItems: 0
          items:
            type: string
          description: ID of a data to fetch
          required: true
          allowEmptyValue: false
        - in: query
          name: From
          type: string
          format: date
          description: |
            min Date (*8601 ISO Date String*) 
          required: true
        - in: query
          name: To
          type: string
          format: date
          description: |
            max Date (*8601 ISO Date String*) 
          required: true
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PointModel'
        '410': 
          description: Authentification problem
      security:
        - basicAuth: []
        - oauthPasswordAuth: [] 
definitions:
  ApiError:
    type: object
    properties:
      code:
        type: integer
        enum: 
          - 0
          - 1
          - 3
          - 5
          - 10
          - 15
          - 17
          - 20
          - 21
          - 23
        description: |
          | Code | Description               | Code HTTP |
          |------|---------------------------|-----------|
          | 1    | Feature not implemented   | 501       |
          | 4    | Access not authorized     | 403       |
          | 5    | HTTP method not supported | 405       |
          | 10   | Object not found          | 404       |
          | 15   | Incorrect parameters      | 415       |
          | 17   | Constraint violation      | 412       |
          | 20   | Internal server error     | 500       |
          | 21   | Internal partial error    | 500       |
          | 23   | Operation aborted         | 408       |
          | 0    | The impossible error      | 418       |
      message:
        type: string
        description: error message _(using localisation)_
  
  NodFlagsEnum:
    type: string
    enum: &NODFLAGSENUM
      - NE 
      - F
      - L
      - N
      - O
      - P
      - R
      - U
      - W 
    description: |
      * NE = does not create WODChange events
      * F  = Fixed, can't be moved or deleted
      * L  = Editable label (NodMajor)
      * N  = Editable name
      * O  = Owned
      * P  = Persistant
      * R  = Read allowed
      * W  = Write allowed
      * U  = Public
  NodRightsEnum:
    type: integer
    enum: &NODRIGHTSENUM
      - 0
      - 1 
      - 2
      - 3
      - 4
      - 5
    description: |
      * 0 = public ~ anonymous
      * 1 = user ~ guest 
      * 2 = manager
      * 3 = staller
      * 4 = administrator
      * 5 = impossible
  NodClass:
    type: object
    description: object type informations
    properties:
      i:
        type: integer
        description: |
          i[d] -> id of the nod class
      l:
        type: string
        description: l[abel] -> ClassName of the object (only enabled in development internal versions), use with caution
        example: 'TNodRess'
      n:
        type: string
        description: n[ame] -> display name of the class
        example: 'Boiler Ressource'
      f:
        type: string
        enum:
          - ''
          - d
          - a
          - s
          - b
        description: |
          f[ormat] -> nod value type family
          * '' -> nil
          * 'd' -> digital / boolean
          * 'a' -> analogic / number
          * 's' -> string
          * 'b' -> blob
            * blob values are serialized as base64 strings, in order to avoid encoding problems with binairies
        example: 'd'
      p:
        type: integer
        description : the parent class id
        example: 1
      g: 
        type: object
        description: g[if] -> meta informations on nod class image representation
        properties:
          i:
            type: integer
            description: |
              i[d] -> identifier of the gif image               
            example: 1974441
          p:
            type: string
            description: |
              p[ath] -> url path name for accessing to the GIF url.  
              This property can be computed from  the `id`and content-type in metadatas.  
              | Image Metadata Content-Type value        |  URI Scheme        |
              |------------------------------------------|--------------------|
              | 'Content-Type: image/gif'                |  /WEB/LIB.gif-<id> |
              | 'Content-Type: image/png'                | /WEB/LIB.png-<id>  |
              | 'Content-Type: image/jpeg'               |  /WEB/LIB.jpg-<id> |
              | 'Content-Type: image/vnd.microsoft.icon' |  /WEB/LIB.ico-<id> |
            example: '/WEB/LIB.ico-1974441'
          m:
            type: object
            description: metadatas on the image object
            properties:
              c: 
                type: string
                description: content type of the file image
                example: "Content-Type: image/vnd.microsoft.icon"
              w:
                type: integer
                description: with of the image
                example: 20
              h:
                type: integer
                description: height of the image
                example:  20
      o: 
        type: boolean
        description: o[wned] -> a class marked as "owned" can create instances with WOSCreate (construction is private)
        example: false
  BaseNodObject:
    type: object
    properties: 
      i: 
        type: integer
        description: |
          i[d] -> unique ID of the nod object
        example: 36202
      p:
        type: string
        description: | 
          p[ath] -> path of the nod in the wos structure
          * exists only one the first/root item if the field **label** is serialized (then the child's path can be computed )
        maxLength: 127
        example: ':Easy.Ress.RESS32'
      l: 
        type: string
        maxLength: 19
        description: | 
          l[abel] -> label /  of the nod object
          * unique identifier beetween siblings
        example: 'RESS32'
      n: 
        type: string
        maxLength: 255
        description: | 
          n[ame] -> display name of the nod object
          * may not exists
        example: 'South boiler'
      np:
        type: string
        maxLength: 19
        description: | 
          n[ame]p[roperty] -> The label of the property / child which contains the value of the **n[ame]** field name. 
          * Any update on the property / child 's value or the field n[ame] invalidates the other part.
          * Be carefull, the field n[ame] could differ from it  related property / child s value by adding a prefix of suffix string
        example: 'name'
      h: 
        type: string
        description: |
          h[int] -> hint on the object real type  
          **_Will be added in the next version_**
      g: 
        type: object
        description: | 
          g[if] -> Dynamic image informations which represents the value, mostly gif image
        properties:
          i:
            type: integer
            description: |
              i[d] -> identifier of the gif image 
            example: 1974441
          t: 
            type: string
            deprecated: true
            description: |
              t[itle] -> title / hint text active which can be displayed with the image  
              **_Will be removed in the next version, replaced with `h` property field on nod object_**
          p:
            type: string
            description: |
              p[ath] -> url path name for accessing to the GIF url
              This property can be computed from  the `id`and content-type in metadatas.  
              | Image Metadata Content-Type value        |  URI Scheme        |
              |------------------------------------------|--------------------|
              | 'Content-Type: image/gif'                |  /WEB/LIB.gif-<id> |
              | 'Content-Type: image/png'                | /WEB/LIB.png-<id>  |
              | 'Content-Type: image/jpeg'               |  /WEB/LIB.jpg-<id> |
              | 'Content-Type: image/vnd.microsoft.icon' |  /WEB/LIB.ico-<id> |
            example: '/WEB/LIB.ico-1974441'
          m:
            type: object
            description: metadatas on the image object
            properties:
              c: 
                type: string
                description: content type of the file image
                example: 'image/gif'
              w:
                type: integer
                description: with of the image
                example: 16
              h:
                type: integer
                description: height of the image
                example:  16
      v: 
        description: |
          v[alue] -> value of the nod object
          * be carefull type depends of the nod type / family
            | Value | Meaning  | Javascript Type       |
            |-------|----------|-----------------------|
            | d     | digital  | Boolean               |
            | a     | analogic | Number                |
            | n     | blob     | base64 encoded String |
            | s     | string   | String                |
        example: "ZSBtb25kZSBkZSBsYSB06WzpZ2VzdGlvbg=="
      d:
        type: string # string
        format: dateTime
        description: |
          d[date] -> datetime of the last nod value change (UTC)
        example: '2012-01-18T00:00:00Z'
      cc: # c[hildren]c[ount]
        type: integer
        description: | 
          c[hildren]c[ount] -> number of level 1 child (direct childs)
          * serialized only if property c[hilds] is not present
        example: 1
      a: # a[censtorId]
        type: integer
        description: |
          a[censtorId] -> ID of the parent nod object
          * field will only be serialized on the first / root serialized nod, this informations could be computed on serialized cihlds
      f:
        type: array
        items:
          type: string
          enum: *NODFLAGSENUM
      ci:
        type: integer
        description: |
          c[lass]i[d] -> class id of the nod object, defined by operation getClasses
      t:
        $ref: '#/definitions/NodClass'
      r:
        type: 'object'
        description: | 
          r[ights] -> required permissions on the nod object 
        properties:
          r:
            type: integer
            enum: *NODRIGHTSENUM
            description: |
              r[ead] -> required permissions for reading the nod fields 
          w:
            type: string
            enum: *NODRIGHTSENUM
            description: |
              w[rite] -> required permissions for setting the nod fields
      s:
        type: 'object'
        description: | 
          s[tats] -> performance counters on the wos eval loop 
        properties:
          t:
            type: integer
            description: |
              t[dm] -> (stat) max duration of the task (in ms)
          l:
            type: integer
            description: |
              l[oop] -> (stat) number of calls of the task from the startup
          c:
            type: integer
            description: |
              c[ustomer] -> number of subscriptions on the nod value change event
      c:
        type: array
        items:
          $ref: '#/definitions/BaseNodObject'
        description: |
          c[hildren] -> properties / childs of the nod object (also BaseNodObject themselves)
    discriminator: 'ci'
    required: 
      - 'ci'
  NodObject:
    type: object
    allOf:
      - $ref: '#/definitions/BaseNodObject'
  NodRessObject:
    type: object
    allOf:
      - $ref: '#/definitions/BaseNodObject'
      - properties:
          rs:
            type: 'string'
            description: |
              r[essource]s[tate] -> nod ressource state text
          rsg: 
            type: integer
            description: |
              r[essource]s[tate]g[if] -> nod ressource state image representation id
          rem: 
            type: string
            enum: 
              - A
              - AD
              - A,D
              - AD,D
              - AD,DD
            description: |
              event mode of the nod ressource object
              * A = appearance
              * AD = appearance, disappearance
              * AD,D = broadcasted appearance, disappearance
              * AD,DD = broadcasted appearance, broadcasted disappearance
          recid:
            type: integer
            description: |
              rec[ord]id -> last event record id, if any
          rpt:
            type: integer
            description: |
              r[eflection]p[oin]t -> id of the reflection nod object
          attribs: 
            type: object
            description: 'The nod attributes from /System/Attribs'
            properties:
              e:
                type: integer
                description: |
                  e[quipment] -> equipment of the nod ressource object
              z:
                type: integer
                description: |
                  z[one] -> area of the nod ressource object
              c:
                type: integer
                description: |
                  c[lass] -> class attributs of the nod ressource object
              g:
                type: array
                items:
                  type: integer
                  description: id of the group attribute 
                description: |
                  g[roups] -> groups ids of the nod ressource object
  NodSetObject:
    type: object
    allOf:
      - $ref: '#/definitions/BaseNodObject'
      - properties:
          sl:
            type: 'array'
            items:
              type: integer
              example: [ 1, 444, 871 ]
            description: |
              s[et]l[ist] -> list of the nod object id's that are registered in the attribute set.
  
  EventTypeEnum:
    type: string
    enum: &EVENTTYPEENUM
      - a
      - d
      - o 
      - s 
      - u 
    description: |
      t[ype] ofthe event
      * a : apparition
      * d : disparition
      * u : unknow
      * o : oneshot
      * s: system
  JrnlEvent:
    type: object
    properties:
      i:
        type: integer
        description: i[d] -> the event identifier
        example: 1000
      l:
        type: string
        description: l[ibelle] ->  the event capton
        example: I'm raised
      d:
        type: string
        format: date
        description: d[ate] -> date of the event
      s:
        type: string
        description: s[tate] -> state text of the ressource captured at the event date
        example: 'smoke on water'
      t:
        type: string
        description: |
          t[ype] of the event
        enum:
          - a
          - d
          - u
          - o
          - s
        example: 'a'
      p:
        type: boolean
        description: p[ending] -> the event type is apparition and related disparition has not occur
          This field shall not be serialized if the filter p[ending]o[nly] is enabled on the request
        example: false
      o:
        type: integer
        description: | 
          o[rigin] -> resource nod id of the event
          _shall not be present if the filter  o[rigin]i[d] nor o[rigin]p[ath] is set on the request_
        example: 1
      ac:
        type: integer
        description: |
          a[ttribute]c[lass] -> the class attribute nod id
          _shall not be present if the user doesn't have access to the nod attribute_
        example: 588
      ag:
        type: array
        items:
          type: integer
        description: |
          a[ttribute]g[roups] -> the array of group attributes associated with the event
          _shall not be present if the user doesn't have access to the nod attribute_
        example: 544, 565, 876
      ae: 
        type: integer
        description: |
          a[attribute]e[quipment] -> the equipment attribute nod id
          _shall not be present if the user doesn't have access to the nod attribute_
        example: 534
      az: 
        type: integer
        description: |
          a[attribute]z[one] -> the zone attribute nod id
          _shall not be present if the user doesn't have access to the nod attribute_
        example: 534
      azp: 
        type: integer
        description: |
          a[attribute]z[one]p[ath] -> the zone attribute nod path
          _shall be be present only if the zone at this given path is not found (for display purpose)_
        example: 'System.Attribute.Zone.Zone3000'
      ack:
        type: boolean
        description: |
          determines wether some user in the current users group has marked the event as commited (acquitted)
        example: false
      acki:
        type: array
        items:
          type: object
          properties:
            u: 
              type: object
              properties:
                n:
                  type: string
                  description: n[ame] -> username, user identity
                m: 
                  type: string
                  description: m[ail] -> email of the user, if any
                g:
                  type: array
                  items:
                    type: number
                  description: g[roups] -> groups of this users
                i:
                  type: integer
                  description: i[d] -> nod id of the user, if exists and the current user has any access to its informations
            d:
              type: string
              format: date
              description: d[ate] -> date of the acquitment / commitment

  BaseItemSchemaObject:
    type: object
    discriminator: id
    properties:
      id: 
        type: string
        description: | 
          Data identifier relative to the Grph API.
          (it's a composed unique key to identify ether flux instance or traces instances)  
          _Be carefull, this is **not a true type descriminiator**_ : to vary beetween trace and flux, the *id will start with*
          * `TRA_<nod_trace_path>` for a trace
          * `WCI_<nod_trace_path>` for a flux  
      name:
        type: string
        description: Display name of the object
      description:
        type: string
      label:
        type: string
      firstDataDate:
        type: string
        format: date
        description: first stored point (value) date 
      lastDataDate:
        type: string
        format: date
        description: last stored point (value) date
      Kind:
        type: string
        description: Type of data stored in flux / trace
        enum:
          - ANALOG
          - DIGITAL
          - STRING
      Flux:
        type: object
        description: u[ser] -> flux object informations
        properties:
          name:
            type: string
            description: the flux name
          WCI:
            type: string
            description: | 
              The WCI identifier allocated by the linked WIT-DataCenter
              '-' means not yet registered.
    example:
      id: TRA_:easy.RESS.R00075.FNCT.F0014
      name: FNCT.F0014
      label: ":easy.RESS.R00075.FNCT.F0014"
      Kind: DIGITAL
      Flux:
        Name: Trace
        WCI: "-"
      description: '' 
  TraceItemSchemaObject:
    type: object
    allOf:
      - $ref: '#/definitions/BaseItemSchemaObject'
  FluxItemSchemaObject:
    type: object
    allOf:
      - $ref: '#/definitions/BaseItemSchemaObject'
      - properties:
          WUMTypeModel:
            type: object
            properties:
              ID:
                type: integer
          WUMUnitModel:
            type: object
            properties:
              ID:
                type: integer
              Name: 
                type: string
              Unit: 
                type: string
        example:
          id: WCI_2807_F003
          name: Potentiomètre
          label: F003
          Kind: ANALOG
          firstDataDate: '2018-02-14T15:15:00Z'
          lastDataDate: '2018-02-14T15:19:30Z'
          WUMTypeModel:
            ID: 0
          WUMUnitModel:
            ID: 0
            Name: "-"
            Unit: ''
          Flux:
            Name: Flux de données
            WCI: WCI7KGQRAV284AG
          description: ''
  PointModel:
    type: object
    properties:
      T:
        type: string
        format: date
        description: The timestamp
      V:
        description: |
          Value, can be either "number" or "string" 
parameters:
  optionsParam: 
    name: 'options'
    in: query
    description: | 
      Fields to fetch in the response

      * ALL = all fields
      * CC = child count  
        *returned only if the field c[hilren] is not present*
      * CI = object class id
      * D = last value changed (set) date
      * F = flags = attributs
      * P = path  
          *returned only with the top-level fetch object (and not childs)*
      * L = label 
      * N = name 
      * G =  image (gif) informations
      * GP = image (gif) URL path part
      * GI = image (gif) metadatas
      * GH = image (gif) additionnal text (hint / title)  
        **_deprecated, will be removed in the next version_**
      * ~~H = Hint (instance type name)~~  
        **_deprecated, will be added in the next version_**
      * A = ancestor id  
        *returned only on the top-level fetch object (and not childs)*
      * S = object execution process statistics
      * T = type / class informations
      * V = value     
        *will not returned value of type Blob*
      * VB = value for Blobs  
        *if field V is not return, will return the size of the stored data*
      * R = rights fields for the current user
      * EXT = extended fields (like ressource objects specific informations)

      _short name: **o**_
    required: false
    type: array
    collectionFormat: csv
    minItems: 0
    items:
      type: string
      enum:
        - ALL
        - CC
        - CI
        - D
        - F
        - P
        - L
        - G
        - GP
        - GI
        - GH
        - N
        - A
        - S
        - T
        - V
        - VB
        - R
        - EXT
    default: 'CI, CC, L, A'          
  flagsParam:
    in: query
    name: f
    type: array
    description: |
      f[lags] of the nod to filter
    collectionFormat: csv
    items:
      type: string
      enum: *NODFLAGSENUM
    default: ''
  takeParam:
    in: query
    name: t
    type: integer
    description: |
      t[ake] -> the number of elements to serialize in the response
    default: 0
  skipParam:
    in: query
    name: s
    type: integer
    description: |
       s[skip] -> the number of elements to skip before serializing the response
    default: 0
  enabledFlagsParam:
    in: formData
    type: array
    name: ef
    collectionFormat: csv
    items:
      type: string
      enum: *NODFLAGSENUM
    description: |
      e[nabled]f[lags] -> flags to add 
    required: false
  disabledFlagsParam:  
    in: formData
    type: array
    name: df
    collectionFormat: csv
    items:
      type: string
      enum: *NODFLAGSENUM
    description: |
      e[nabled]f[lags] -> flags to remove  

  eventOptionsParam: 
    name: 'o'
    in: query
    description: | 
      [o]ptions -> string of all possible options
      * all = enable all options 
      * i = event id __(always embedded in response)
      * d = origin date 
      * l = event caption
      * s = state (of the ressource) captured with the event
      * t = event type (oneshot, apparition, disparition, system or unknow)
      * p = pending (this status can change at any momment)
      * ac = classes (attributes)
      * ag = groups (attributes)
      * ae = equipments (attributes)
      * az= zone (attributes)
      * ack = acquitment
      * acki = ecquiment informations
      * ress = ressource nod id
      * sid = site nod id 
      * sil = site name
    required: false
    type: array
    collectionFormat: csv
    minItems: 0
    items:
      type: string
      enum:
        - all
        - i
        - d
        - l
        - s
        - p
        - ac
        - ag
        - ae
        - az
        - ack
        - acki
        - ress
        - sid
        - sil
    default: 'i,d,l,s,t'          
  eventTypeParam: 
    in: query
    name: et
    type: array
    collectionFormat: csv
    items: 
      type: string
      enum: *EVENTTYPEENUM
  typeParam: 
    in: query
    name: et
    type: array
    collectionFormat: csv
    items: 
      type: string
      enum: *EVENTTYPEENUM  

responses:
  NotAuthorized:
    schema:
      $ref: "#/definitions/ApiError"
    description: | 
      Access not authorized, _a permission may be required._
    examples:
      application/json:
        message: Invalid WSID/SID
  NotFound:
    schema:
      $ref: "#/definitions/ApiError"
    description: |
      Object not found *(provided path or id does not exists)*
    examples:
      application/json:
        code: 10
        message: Element not found (bad id or path provided)
  MethodNotAllowed:
    schema:
      $ref: "#/definitions/ApiError"
    description: |
      Unsupported HTTP method / verb
    examples:
      application/json:
        code: 5
        message: Unsupported HTTP method
  Timeout:
    schema:
      $ref: "#/definitions/ApiError"
    description: | 
      Request timeout, _The time to build the response may be too long, it has be aborted_
    examples:
      application/json:
        code: 23
        message: TimeOut

securityDefinitions:
  basicAuth:
    type: basic
    description: |
      **_Obsolete, will be removed in the next version_**  
      Do not use if multiple request has to be done, as it will create multiple session objects.
  oauthPasswordAuth:
    type: oauth2
    flow: password
    tokenUrl: 'http://localhost/web/api/v1/auth/token'
    scopes: {}
    description: |
      ~~The ressource owner password credentials is avaiblable for distant applications.~~  
      **_Will be enabled in the next version_**  
      Actually, it delivers AccessToken based on user authentification and do not requires`client_identifier` or `client_secret` informations.
      **Should be prefered** to basic auth, as it uses internal product session as token bearer.
